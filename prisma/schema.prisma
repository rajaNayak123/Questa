// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  creatorId   String     @db.ObjectId
  creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  questions   Question[]
  responses   Response[]
  isPublic    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  quizId  String       @db.ObjectId
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text    String
  type    QuestionType
  options String[] // For single-choice questions
  order   Int
  answers Answer[]
}

model Response {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String   @db.ObjectId
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   Answer[]
  createdAt DateTime @default(now())
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  responseId String   @db.ObjectId
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  value      String
}

enum QuestionType {
  SINGLE_CHOICE
  TEXT
}
